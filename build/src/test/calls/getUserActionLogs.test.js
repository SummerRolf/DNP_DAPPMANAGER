const proxyquire = require("proxyquire");
const fs = require("fs");
const shell = require("utils/shell");
const chai = require("chai");
const expect = require("chai").expect;
const paramsDefault = require("params");

chai.should();

const testDir = "./test_files/";
const userActionLogsFilename = testDir + "userActionLogs.log";
const log1 = "log_1";
const log2 = "log_2";
const log3 = "log_3";
const log4 = "log_4";

// User logs are generated by winston, in an appending fashion
const userActionLogs = [log1, log2, log3, log4].join("\n");

describe("Call function: getUserActionLogs", function() {
  const params = {
    ...paramsDefault,
    userActionLogsFilename
  };

  const getUserActionLogs = proxyquire("calls/getUserActionLogs", {
    params
  });

  before(async () => {
    await shell(`mkdir -p ${testDir}`);
    fs.writeFileSync(userActionLogsFilename, userActionLogs);
  });

  it("should return the latest two logs", async () => {
    const res = await getUserActionLogs({
      fromLog: 0,
      numLogs: 2
    });
    expect(res).to.be.ok;
    expect(res).to.have.property("message");
    expect(res.result).to.equal([log4, log3].join("\n"));
  });

  it("should return the next two logs", async () => {
    const res = await getUserActionLogs({
      fromLog: 2,
      numLogs: 2
    });
    expect(res).to.be.ok;
    expect(res).to.have.property("message");
    expect(res.result).to.equal([log2, log1].join("\n"));
  });

  it("should return all logs, with the default values 0, 50", async () => {
    const res = await getUserActionLogs({});
    expect(res).to.be.ok;
    expect(res).to.have.property("message");
    expect(res.result).to.equal([log4, log3, log2, log1].join("\n"));
  });

  after(async () => {
    await shell(`rm -rf ${testDir}`);
  });
});
